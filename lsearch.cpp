/*
Program: Linear Search with MPI
Description: Find odd number and counting

*/
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <math.h>
#include <stdlib.h>
#include <mpi.h>
#include <time.h>
#include <windows.h>

//Function for Linear search
void Oddsearch(int *v, int n, int *count) {
	int i, j;
	for (i = 0; i < n; i++) {
		if (v[i] % 2 != 0) {
			(*count) = (*count) + 1;
		}
	}
	printf("jumlah iterasi yang dilakukan: %d\n", i);
}

int main(int argc, char** argv)
{
	/*Local Lib*/
	int rank, np; //rank of processes and number of processes
	int n, n_elems_recv, n_low, mpi, size_elems;
	double times;
	double elapsedTime;
	int count;
	int* chunk;
	int* other;
	int r;

	int arr[] = { 7,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,
		17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,
		36,37,38,39,40,41,42,43,44,45,17,19,20,19,22,56,3,2,1,
		1,1,2,3,4,99,100,45,46,47,48,49,50,51,52,53,54,55,98,97,96,98
		,67,68,69,65,55,78,79,71,72,73,77,76,47,61,63,90,95,96,11
		,12,13,13,13,13,14,14,2,2,2,3,4,4,4,4,4,4,4,6,6,6,6,
		6,6,6,6,6,32,33,31,30,20,10,40,50,60,70,80,90,
		122,33,32,44,32,44,4,5,7,7,7,79,9,9,9,1,2,3,4,5,1,2,3,4,5,7,8,9,
		1,2,3,4,5,6,4,4,4,4,4,1,1,1,1,11,11,11,12,12,12,12,13,13,4,4,4,
		5,5,5,5,5,5,5,5,55,5,5,5,5,5,5,5,5,5,5,20,20,20,20,20,15,14,14,
		13,13,13,14,15,16,17,18,21,21,21,127,128,171,199,201,205,203,
		204,154,155,145,455,147,148,98,98,975,121,131,141,151,173,177,
		176,166,132,133,111,112,113,114,117,115,119,120,
		122,33,32,44,32,44,4,5,7,7,7,79,9,9,9,1,2,3,4,5,1,2,3,4,5,7,8,9,
		1,2,3,4,5,6,4,4,4,4,4,1,1,1,1,11,11,11,12,12,12,12,13,13,4,4,4,
		5,5,5,5,5,5,5,5,55,5,5,5,5,5,5,5,5,5,5,20,20,20,20,20,15,14,14,
		13,13,13,14,15,16,17,18,21,21,21,127,128,171,199,201,205,203,
		204,154,155,145,455,147,148,98,98,975,121,131,141,151,173,177,
		176,166,132,133,111,112,113,114,117,115,119,120,
		7,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,
		17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,
		36,37,38,39,40,41,42,43,44,45,17,19,20,19,22,56,3,2,1,
		1,1,2,3,4,99,100,45,46,47,48,49,50,51,52,53,54,55,98,97,96,98
		,67,68,69,65,55,78,79,71,72,73,77,76,47,61,63,90,95,96,11
		,12,13,13,13,13,14,14,2,2,2,3,4,4,4,4,4,4,4,6,6,6,6,
		6,6,6,6,6,32,33,31,30,20,10,40,50,60,70,80,90,
		122,33,32,44,32,44,4,5,7,7,7,79,9,9,9,1,2,3,4,5,1,2,3,4,5,7,8,9,
		1,2,3,4,5,6,4,4,4,4,4,1,1,1,1,11,11,11,12,12,12,12,13,13,4,4,4,
		5,5,5,5,5,5,5,5,55,5,5,5,5,5,5,5,5,5,5,20,20,20,20,20,15,14,14,
		13,13,13,14,15,16,17,18,21,21,21,127,128,171,199,201,205,203,
		204,154,155,145,455,147,148,98,98,975,121,131,141,151,173,177,
		176,166,132,133,111,112,113,114,117,115,119,120,
		122,33,32,44,32,44,4,5,7,7,7,79,9,9,9,1,2,3,4,5,1,2,3,4,5,7,8,9,
		1,2,3,4,5,6,4,4,4,4,4,1,1,1,1,11,11,11,12,12,12,12,13,13,4,4,4,
		176,166,132,133,111,112,113,114,117,115,119,120,
		122,33,32,44,32,44,4,5,7,7,7,79,9,9,9,1,2,3,4,5,1,2,3,4,5,7,8,9,
		1,2,3,4,5,6,4,4,4,4,4,1,1,1,1,11,11,11,12,12,12,12,13,13,4,4,4,
		5,5,5,5,5,5,5,5,55,5,5,5,5,5,5,5,5,5,5,20,20,20,20,20,15,14,14,
		13,13,13,14,15,16,17,18,21,21,21,127,128,171,199,201,205,203,
		204,154,155,145,455,147,148,98,98,975,121,131,141,151,173,177,
		176,166,132,133,111,112,113,114,117,115,119,120,
		7,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,
		17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,
		36,37,38,39,40,41,42,43,44,45,17,19,20,19,22,56,3,2,1,
		1,1,2,3,4,99,100,45,46,47,48,49,50,51,52,53,54,55,98,97,96,98
		,67,68,69,65,55,78,79,71,72,73,77,76,47,61,63,90,95,96,11
		,12,13,13,13,13,14,14,2,2,2,3,4,4,4,4,4,4,4,6,6,6,6,
		6,6,6,6,6,32,33,31,30,20,10,40,50,60,70,80,90,
		122,33,32,44,32,44,4,5,7,7,7,79,9,9,9,1,2,3,4,5,1,2,3,4,5,7,8,9,
		1,2,3,4,5,6,4,4,4,4,4,1,1,1,1,11,11,11,12,12,12,12,13,13,4,4,4,
		5,5,5,5,5,5,5,5,55,5,5,5,5,5,5,5,5,5,5,20,20,20,20,20,15,14,14,
		13,13,13,14,15,16,17,18,21,21,21,127,128,171,199,201,205,203,
		204,154,155,145,455,147,148,98,98,975,121,131,141,151,173,177,
		7,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,
		17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,
		36,37,38,39,40,41,42,43,44,45,17,19,20,19,22,56,3,2,1,
		1,1,2,3,4,99,100,45,46,47,48,49,50,51,52,53,54,55,98,97,96,98
		,67,68,69,65,55,78,79,71,72,73,77,76,47,61,63,90,95,96,11
		,12,13,13,13,13,14,14,2,2,2,3,4,4,4,4,4,4,4,6,6,6,6,
		6,6,6,6,6,32,33,31,30,20,10,40,50,60,70,80,90,
		122,33,32,44,32,44,4,5,7,7,7,79,9,9,9,1,2,3,4,5,1,2,3,4,5,7,8,9,
		1,2,3,4,5,6,4,4,4,4,4,1,1,1,1,11,11,11,12,12,12,12,13,13,4,4,4,
		176,166,132,133,111,112,113,114,117,115,119,120,
		7,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,
		17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,
		36,37,38,39,40,41,42,43,44,45,17,19,20,19,22,56,3,2,1,
		1,1,2,3,4,99,100,45,46,47,48,49,50,51,52,53,54,55,98,97,96,98
		,67,68,69,65,55,78,79,71,72,73,77,76,47,61,63,90,95,96,11
		,12,13,13,13,13,14,14,2,2,2,3,4,4,4,4,4,4,4,6,6,6,6,
		6,6,6,6,6,32,33,31,30,20,10,40,50,60,70,80,90,
		122,33,32,44,32,44,4,5,7,7,7,79,9,9,9,1,2,3,4,5,1,2,3,4,5,7,8,9,
		1,2,3,4,5,6,4,4,4,4,4,1,1,1,1,11,11,11,12,12,12,12,13,13,4,4,4,
		5,5,5,5,5,5,5,5,55,5,5,5,5,5,5,5,5,5,5,20,20,20,20,20,15,14,14,
		13,13,13,14,15,16,17,18,21,21,21,127,128,171,199,201,205,203,
		204,154,155,145,455,147,148,98,98,975,121,131,141,151,173,177,
		176,166,132,133,111,112,113,114,117,115,119,120,
		122,33,32,44,32,44,4,5,7,7,7,79,9,9,9,1,2,3,4,5,1,2,3,4,5,7,8,9,
		1,2,3,4,5,6,4,4,4,4,4,1,1,1,1,11,11,11,12,12,12,12,13,13,4,4,4,
		176,166,132,133,111,112,113,114,117,115,119,120,
		122,33,32,44,32,44,4,5,7,7,7,79,9,9,9,1,2,3,4,5,1,2,3,4,5,7,8,9,
		1,2,3,4,5,6,4,4,4,4,4,1,1,1,1,11,11,11,12,12,12,12,13,13,4,4,4,
		5,5,5,5,5,5,5,5,55,5,5,5,5,5,5,5,5,5,5,20,20,20,20,20,15,14,14,
		13,13,13,14,15,16,17,18,21,21,21,127,128,171,199,201,205,203,
		204,154,155,145,455,147,148,98,98,975,121,131,141,151,173,177,
		176,166,132,133,111,112,113,114,117,115,119,120,
		7,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,
		17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,
		36,37,38,39,40,41,42,43,44,45,17,19,20,19,22,56,3,2,1,
		1,1,2,3,4,99,100,45,46,47,48,49,50,51,52,53,54,55,98,97,96,98
		,67,68,69,65,55,78,79,71,72,73,77,76,47,61,63,90,95,96,11
		,12,13,13,13,13,14,14,2,2,2,3,4,4,4,4,4,4,4,6,6,6,6,
		6,6,6,6,6,32,33,31,30,20,10,40,50,60,70,80,90,
		122,33,32,44,32,44,4,5,7,7,7,79,9,9,9,1,2,3,4,5,1,2,3,4,5,7,8,9,
		1,2,3,4,5,6,4,4,4,4,4,1,1,1,1,11,11,11,12,12,12,12,13,13,4,4,4,
		5,5,5,5,5,5,5,5,55,5,5,5,5,5,5,5,5,5,5,20,20,20,20,20,15,14,14,
		13,13,13,14,15,16,17,18,21,21,21,127,128,171,199,201,205,203,
		204,154,155,145,455,147,148,98,98,975,121,131,141,151,173,177,
		7,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,
		17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,
		36,37,38,39,40,41,42,43,44,45,17,19,20,19,22,56,3,2,1,
		1,1,2,3,4,99,100,45,46,47,48,49,50,51,52,53,54,55,98,97,96,98
		,67,68,69,65,55,78,79,71,72,73,77,76,47,61,63,90,95,96,11
		,12,13,13,13,13,14,14,2,2,2,3,4,4,4,4,4,4,4,6,6,6,6,
		6,6,6,6,6,32,33,31,30,20,10,40,50,60,70,80,90,
		122,33,32,44,32,44,4,5,7,7,7,79,9,9,9,1,2,3,4,5,1,2,3,4,5,7,8,9,
		1,2,3,4,5,6,4,4,4,4,4,1,1,1,1,11,11,11,12,12,12,12,13,13,4,4,4 };


	MPI_Status status;
	int size = sizeof(arr) / sizeof(int);
	/*Algorithm*/
	count = 0;

	// Initialize MPI
	mpi = MPI_Init(&argc, &argv);
	

	if (mpi != 0) {
		printf("\n");
		printf("Fatal error!\n");
	}

	//get number and rank of processes
	mpi = MPI_Comm_size(MPI_COMM_WORLD, &np);
	mpi = MPI_Comm_rank(MPI_COMM_WORLD, &rank);

	size_elems = size / np;
	r = size % np;

	if (r != 0) {
		size_elems = size_elems + 1;
	}

	chunk = (int*)malloc(size_elems * sizeof(int));

	// do this if processes id or rank is 0 or master rank
	if (rank == 0)
	{
		printf("Count Odd Number Program with MPI is Started\n");
		printf("The number of processes: %d and data is : %d\n", np, size);
		
		MPI_Scatter(arr, size_elems, MPI_INT, chunk, size_elems, MPI_INT, 0, MPI_COMM_WORLD);

		times = -MPI_Wtime();
		// Find odd number
		count = 0;
		Oddsearch(chunk, size_elems, &count);
		
	}
	else {
		MPI_Scatter(arr, size_elems, MPI_INT, chunk, size_elems, MPI_INT, 0, MPI_COMM_WORLD);

		times = -MPI_Wtime();
		// Find odd number in each rank processess except rank 0
		count = 0;
		Oddsearch(chunk, size_elems, &count);
		
	}
	times += MPI_Wtime();
	printf("execution time in rank: %d is: %f\n", rank, times);

	printf("amount odd number in procs: %d is: %d\n", rank, count);

	mpi = MPI_Finalize();

	return 0;
}
